# -*- coding: utf-8 -*-
"""working lpg

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d7v8w81lVABEsninBdR9OPqvEFyum8xU
"""

from google.colab import drive
drive.mount('/content/drive')

import keras
from keras import layers
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout, Flatten
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
import keras.backend as K
import tensorflow as tf
import numpy as np
from keras import backend as K
from keras.utils import np_utils
import os
from matplotlib import pyplot as plt
import cv2
import imghdr

import warnings
warnings.filterwarnings("ignore")

os.listdir("/content/drive/MyDrive/LPG binary classification Project")

# Importing Image class from PIL module
from PIL import Image
import cv2
import sys
ymin=250
ymax=790
xmin=320
xmax=1200

for i in os.listdir("/content/drive/MyDrive/LPG binary classification Project"):
  for folder in os.listdir(os.path.join("/content/drive/MyDrive/LPG binary classification Project",i)):
    print(folder)
    # Opens a image in RGB mode
    img = cv2.imread(os.path.join("/content/drive/MyDrive/LPG binary classification Project", i, folder))
    img = img[ymin:ymax, xmin:xmax]
    #cv2.imwrite("/content/img.png", img)             #preview
    #sys.exit()
    cv2.imwrite(os.path.join("/content/drive/MyDrive/LPG_crop", i, folder), img)  #saving

Data = "/content/drive/MyDrive/LPG_crop"

image_exts =["jpeg", "jpg", "bmp", "png"]

for image_class in os.listdir(Data):
  for image in os.listdir(os.path.join(Data, image_class)):
    image_path = os.path.join(Data, image_class, image)
    try:
      img = cv2.imread(image_path)
      tip = imghdr.what(image_path)
      if tip not in image_exts:
        print("Image not in ext list {}".format(image_path))
        os.remove(image_path)
    except Exception as e:
      print("Issue with image {}".format(image_path))

img.shape

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show()

##!pip install split-folders

##import splitfolders

##splitfolders.ratio("/content/drive/MyDrive/LPG binary classification Project", output="output", ratio=(0.8, 0.1, 0.1))



data = tf.keras.utils.image_dataset_from_directory("/content/drive/MyDrive/LPG_crop")

data_iterator = data.as_numpy_iterator()

batch = data_iterator.next()



fig, ax = plt.subplots(ncols=4, figsize=(20,20))
for idx, img in enumerate(batch[0][20:24]):
  ax[idx].imshow(img.astype(int))
  ax[idx].title.set_text(batch[1][idx])



"""Split data"""

batch[0].shape

batch[0].max()

batch[0].min()

train_size = int(len(data)*.7)+1
val_size = int(len(data)*.2)
test_size = int(len(data)*.1)

len(data)

train_size

val_size

test_size

model = Sequential()

model.add(Conv2D(256,(3,3), 1, activation="relu", input_shape=(256,256,3)))
model.add(MaxPooling2D())

model.add(Conv2D(128, (3, 3), 1, activation= "relu"))
model.add(MaxPooling2D())

model.add(Conv2D(64, (3,3), 1, activation="relu"))
model.add(MaxPooling2D())

model.add(Flatten())
model.add(Dense(64, activation="relu"))
model.add(Dense(1, activation="sigmoid"))

model.compile("adam", loss=tf.losses.BinaryCrossentropy(), metrics=["accuracy"])

model.summary()

logdir = "/content/drive/MyDrive/LPG OUtPUT"

train = data.take(train_size)
 val = data.skip(train_size).take(val_size)
 test = data.skip(train_size+val_size).take(test_size)

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

hist = model.fit(train, epochs=25, validation_data=val, callbacks=[tensorboard_callback])

## tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

fig = plt.figure(figsize=(15,  15))

plt.plot(hist.history['loss'], color='Cyan', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)

plt.legend(loc="upper left")
plt.show()

model.evaluate(test)

